------------------------------------------APEX REST CALLOUTS MODULE---------------------------------------
-------------------------------------------Apex class name:: AnimalLocator--------------------------------
public class AnimalLocator{
    public static String getAnimalNameById(Integer x){
        Http http = new Http();
        HttpRequest req = new HttpRequest();
        req.setEndpoint('https://th-apex-http-callout.herokuapp.com/animals/' + x);
        req.setMethod('GET');
        Map<String, Object> animal= new Map<String, Object>();
        HttpResponse res = http.send(req);
            if (res.getStatusCode() == 200) {
        Map<String, Object> results = (Map<String, Object>)JSON.deserializeUntyped(res.getBody());
      animal = (Map<String, Object>) results.get('animal');
        }
return (String)animal.get('name');
    }
}
-------------------------------------------Apex class name:: AnimalLocatorTest--------------------------------
@IsTest
private class AnimalLocatorTest {
    @isTest static  void  testGetCallout() {
    // Set mock callout class
    Test.setMock(HttpCalloutMock.class, new AnimalLocatorMock());
    // This causes a fake response to be sent
    // from the class that implements HttpCalloutMock.
    String animalname = AnimalLocator.getAnimalNameById(2);
    // Verify that the response received contains fake values        
    String expectedValue = 'bear';
    System.assertEquals(animalname, expectedValue);
    }
}
-------------------------------------------Apex class name:: AnimalLocatorMock--------------------------------
@IsTest
global class AnimalLocatorMock implements HttpCalloutMock {
    //Implement this interface method
    global HTTPResponse respond(HTTPRequest request) {
        // Create a fake response
        HttpResponse response = new HttpResponse();
        response.setHeader('Content-Type', 'application/json');
        response.setBody('{"animal":{"id":2,"name":"bear","eats":"berries, campers, adam seligman","says":"yum yum"}}');
        response.setStatusCode(200);
        return response;
    }
}



------------------------------------------APEX SOAP CALLOUTS MODULE---------------------------------
Save the file as shown in trailhead and continue with the code below.After copying the code below save all and run all code.
----------------------------------------Apexclass:ParkLocater--------------------------------------------
public class ParkLocator{
    public static string[] Country(string theCountry){
        ParkService.ParksImplPort parkSvc=new ParkService.ParksImplPort();
        return parkSvc.byCountry(theCountry);
    }
}
----------------------------------------Apexclass:ParkLocaterTester------------------------------
@isTest
private class ParkLocatorTest {
    testMethod static void testCallout(){
         Test.setMock(WebServiceMock.class, new ParkServiceMock());
         String country = 'United States';
         String[] result = ParkLocator.country(country);
        System.assertEquals(new List<String>{'Garner State Park', 'Fowler Park', 'Hoosier National Forest Park'}, result);
    }
}
----------------------------------------Apexclass:ParkServiceMock-------------------------------------

@isTest
global class ParkServiceMock implements WebServiceMock{
    global void doInvoke(
    Object stub,
    Object request,
    Map<String,Object> response,
    String endpoint,
    String soapAction,
    String requestName,
    String responseNS,
    String responseName,
        String responseType) {
            ParkService.byCountryResponse response_x = new ParkService.byCountryResponse();
            response_x.return_x = new List<String>{'Garner State Park', 'Fowler Park', 'Hoosier National Forest Park'};
                response.put('response_x',response_x);
        }
}
---------------------------------------APEX WEB SERVICES MODULE-------------------------------------
-------------------------------------------Apex class name:AccountManager----------------------------
@RestResource(urlMapping='/Accounts/*/contacts')
global class AccountManager {
    @HttpGet
    global static Account getAccount() {
        RestRequest req = RestContext.request;
        String accId = req.requestURI.substringBetween('Accounts/', '/contacts');
        Account acc = [SELECT Id, Name, (SELECT Id, Name FROM Contacts) 
                       FROM Account WHERE Id = :accId];
        return acc;
    }
}
-------------------------------------------Apex Class name:AccountManagerTest---------------------
@isTest
private class AccountManagerTest {

    private static testMethod void getAccountTest1() {
        Id recordId = createTestRecord();
        // Set up a test request
        RestRequest request = new RestRequest();
        request.requestUri = 'https://na1.salesforce.com/services/apexrest/Accounts/'+
 recordId +'/contacts' ;
        request.httpMethod = 'GET';
        RestContext.request = request;
        // Call the method to test
        Account thisAccount = AccountManager.getAccount();
        // Verify results
        System.assert(thisAccount != null);
        System.assertEquals('Test record', thisAccount.Name);

    }

    // Helper method
        static Id createTestRecord() {
        // Create test record
        Account TestAcc = new Account(
          Name='Test record');
        insert TestAcc;
        Contact TestCon= new Contact(
        LastName='Test', 
        AccountId = TestAcc.id);
        return TestAcc.Id;
    } 
}
--------------------------------WOHOOO TACKLED THIS MODULE-------------------------
