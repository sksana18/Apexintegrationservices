------------------USE FUTURE METHODS---------------
--------------------Apex Class Name:AccountProcessor------------------------------
public class AccountProcessor {
    @future
    public static void countContacts(List<id> accountIds){
        List<Account>accountsToUpdate=new List<Account>();
        List<account>accounts=[Select Id,Name,(Select Id from Contacts)from Account Where Id in :accountIds];
        
        For(Account acc:accounts){
            List<Contact> contactList=acc.Contacts;
            acc.Number_Of_Contacts__c=contactList.size();
            accountsToUpdate.add(acc);
        }
        update accountsToUpdate;
    }
}
--------------------Apex Class Name:AccountProcessorTest------------------------------
@istest
private class AccountProcessorTest {
    @isTest
    private static void testCountContacts(){
        Account newAccount=new Account(Name='Test Account');
        Insert newAccount;
        
        Contact c=new Contact();
        c.FirstName='Bob';
        c.LastName='Willie';
        c.AccountId=newAccount.Id;
        
        Contact c2=new Contact();
        c2.FirstName='Tom';
        c2.LastName='Cruise';
        c2.AccountId=newAccount.Id;
        
        List<Id> accountIds=new List<Id>();
        accountIds.add(newAccount.Id);
        
        Test.startTest();
        AccountProcessor.countContacts(accountIds);
        Test.stopTest();     
    }

}
------------------USE BATCH APEX------------------
-----------------------------Apex Class Name:LeadProcessor-------------------------
//public class LeadProcessor {
    global class LeadProcessor implements
    Database.Batchable<sObject>, Database.Stateful {
    
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    
    global Database.QueryLocator start(Database.BatchableContext bc) {
    return Database.getQueryLocator('SELECT Id, LeadSource FROM Lead');
    }
    
    global void execute(Database.BatchableContext bc, List<Lead> scope){
    // process each batch of records
    List<Lead> leads = new List<Lead>();
    for (Lead lead : scope) {
    
    lead.LeadSource = 'Dreamforce';
    // increment the instance member counter
    recordsProcessed = recordsProcessed + 1;
    
    }
    update leads;
    }
    
    global void finish(Database.BatchableContext bc){
    System.debug(recordsProcessed + ' records processed. Shazam!');
    
    }
}
-----------------------------Apex Class Name:LeadProcessorTest-----------------------
@isTest
public class LeadProcessorTest {
    @testSetup
    static void setup() {
    List<Lead> leads = new List<Lead>();
    // insert 200 leads
    for (Integer i=0;i<200;i++) {
    leads.add(new Lead(LastName='Lead '+i,
    Company='Lead', Status='Open - Not Contacted'));
    }
    insert leads;
    }
    
    static testmethod void test() {
    Test.startTest();
    LeadProcessor lp = new LeadProcessor();
    Id batchId = Database.executeBatch(lp, 200);
    Test.stopTest();
    
    // after the testing stops, assert records were updated properly
    System.assertEquals(200, [select count() from lead where LeadSource = 'Dreamforce']);
    }
}
-----------------------------CONTROL PROCESS WITH QUEUEABLE APEX--------------------------
------------------------------APEX CLASS NAME:AddPrimaryContact--------------------------------
public class AddPrimaryContact implements Queueable
{
    private Contact c;
    private String state;
    public AddPrimaryContact(Contact c, String state)
    {
    this.c = c;
    this.state = state;
    }
    public void execute(QueueableContext context)
    {
    List<Account> ListAccount = [SELECT ID, Name ,(Select id,FirstName,LastName from contacts ) FROM ACCOUNT WHERE BillingState = :state LIMIT 200];
    List<Contact> lstContact = new List<Contact>();
    for (Account acc:ListAccount)
    {
    Contact cont = c.clone(false,false,false,false);
    cont.AccountId = acc.id;
    lstContact.add( cont );
    }
    
    if(lstContact.size() >0 )
    {
    insert lstContact;
    }
    
    }
    
}
------------------------------Apex Class Name:AddPrimaryContactTest------------------------------
@isTest
public class AddPrimaryContactTest
{
    @isTest static void TestList()
    {
    List<Account> Teste = new List <Account>();
    for(Integer i=0;i<50;i++)
    {
    Teste.add(new Account(BillingState = 'CA', name = 'Test'+i));
    }
    for(Integer j=0;j<50;j++)
    {
    Teste.add(new Account(BillingState = 'NY', name = 'Test'+j));
    }
    insert Teste;
    
    Contact co = new Contact();
    co.FirstName='demo';
    co.LastName ='demo';
    insert co;
    String state = 'CA';
    
    AddPrimaryContact apc = new AddPrimaryContact(co, state);
    Test.startTest();
    System.enqueueJob(apc);
    Test.stopTest();
    }
}

------------------SCHEDULE JOBS USING THE APEX SCHEDULER---------------
----------------------Apex Class name:DailyLeadProcessor----------------------
public class DailyLeadProcessor implements Schedulable  {
    Public void execute(SchedulableContext SC){
       List<Lead> LeadObj=[SELECT Id from Lead where LeadSource=null limit 200]; 
        for(Lead l:LeadObj){
            l.LeadSource='Dreamforce';
            update l;
        }
    }
}
-------------------------Apex Class Name:DailyLeadProcessorTest---------------
@isTest
private class DailyLeadProcessorTest {
	static testMethod void testDailyLeadProcessor() {
		String CRON_EXP = '0 0 1 * * ?';
		List<Lead> lList = new List<Lead>();
	    for (Integer i = 0; i < 200; i++) {
			lList.add(new Lead(LastName='Dreamforce'+i, Company='Test1 Inc.', Status='Open - Not Contacted'));
		}
		insert lList;
		  
		Test.startTest();
		String jobId = System.schedule('DailyLeadProcessor', CRON_EXP, new DailyLeadProcessor()); 
	}
}
------------------------------WOHOOOO TACKLED THIS MODULE --------------------------------
